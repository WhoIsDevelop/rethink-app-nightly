plugins {
    id 'com.android.application'
    id 'com.google.devtools.ksp'
    id 'kotlin-android'
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()

// Загружаем keystore.properties только если он существует
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    logger.warn("keystore.properties not found, relying on environment variables")
}

// Получаем версию из git describe
def gitVersion = providers.exec {
    commandLine("git", "describe", "--tags", "--always")
}.standardOutput.asText.get().toString().trim()

// Получаем versionCode из переменной окружения (для GitHub) или gradle.properties
def getVersionCode = {
    def code = 0
    try {
        code = Integer.parseInt(System.getenv("VERSION_CODE"))
        logger.info("env version code: $code")
    } catch (NumberFormatException ex) {
        logger.info("missing env version code: $ex.message")
    }
    if (code == 0) {
        code = project.properties['VERSION_CODE'] as Integer ?: 1
        logger.info("project properties version code: $code")
    }
    return code
}

android {
    compileSdk 36
    namespace 'com.celzero.bravedns'

    defaultConfig {
        applicationId "com.celzero.bravedns"
        minSdkVersion 28
        targetSdkVersion 36
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            // Проверяем наличие всех необходимых свойств
            if (!keystoreProperties['storePassword'] && !System.getenv("KEYSTORE_STORE_PASSWORD")) {
                throw new GradleException("Missing storePassword in keystore.properties or KEYSTORE_STORE_PASSWORD environment variable")
            }
            if (!keystoreProperties['keyPassword'] && !System.getenv("KEYSTORE_KEY_PASSWORD")) {
                throw new GradleException("Missing keyPassword in keystore.properties or KEYSTORE_KEY_PASSWORD environment variable")
            }
            if (!keystoreProperties['keyAlias'] && !System.getenv("KEYSTORE_ALIAS")) {
                throw new GradleException("Missing keyAlias in keystore.properties or KEYSTORE_ALIAS environment variable")
            }
            if (!keystoreProperties['storeFile'] && !file("app/keystore.jks").exists()) {
                throw new GradleException("Missing storeFile in keystore.properties or app/keystore.jks not found")
            }

            keyAlias keystoreProperties['keyAlias'] ?: System.getenv("KEYSTORE_ALIAS")
            keyPassword keystoreProperties['keyPassword'] ?: System.getenv("KEYSTORE_KEY_PASSWORD")
            storeFile file(keystoreProperties['storeFile'] ?: "app/keystore.jks")
            storePassword keystoreProperties['storePassword'] ?: System.getenv("KEYSTORE_STORE_PASSWORD")
        }
    }

    // Настройка для сборки только arm64-v8a
    splits.abi {
        enable true
        reset()
        include 'arm64-v8a'
        universalApk false
    }

    // Устанавливаем versionCode для arm64-v8a
    project.ext.versionCodes = ['arm64-v8a': 3]
    android.applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            if (abi != null) {
                def baseAbiVersionCode = project.ext.versionCodes.get(abi)
                output.versionCodeOverride = baseAbiVersionCode * 10000000 + variant.versionCode
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    packagingOptions {
        jniLibs {
            keepDebugSymbols += ['**/*.so']
        }
    }

    flavorDimensions = ["releaseChannel", "releaseType"]
    productFlavors {
        website {
            dimension "releaseChannel"
        }
        full {
            dimension "releaseType"
            versionCode = getVersionCode()
            versionName = gitVersion
            vectorDrawables.useSupportLibrary = true
        }
    }
    lint {
        abortOnError true
    }
}

configurations {
    download {
        transitive false
    }
}

def firestackRepo = project.findProperty("firestackRepo") ?: "github"
def firestackCommit = project.findProperty("firestackCommit") ?: "main"

def firestackDependency = { suffix = "" ->
    switch (firestackRepo) {
        case "jitpack":
            return "com.github.celzero:firestack:$firestackCommit${suffix}@aar"
        case "github":
            return "com.github.celzero:firestack:$firestackCommit${suffix}"
        case "ossrh":
            return "com.celzero:firestack:$firestackCommit${suffix}@aar"
        default:
            throw new GradleException("Unknown firestackRepo: $firestackRepo")
    }
}

dependencies {
    def room_version = "2.7.2"
    def paging_version = "3.3.6"

    implementation 'com.google.guava:guava:33.4.8-android'
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:2.1.5")

    fullImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.2.20"
    fullImplementation 'androidx.appcompat:appcompat:1.7.1'
    fullImplementation 'androidx.core:core-ktx:1.17.0'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    fullImplementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    fullImplementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    fullImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2'
    fullImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2'

    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.9.2'

    implementation 'com.google.code.gson:gson:2.13.1'

    implementation "androidx.room:room-runtime:$room_version"
    ksp "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-paging:$room_version"

    fullImplementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.9.2'
    fullImplementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.9.2'

    implementation "androidx.paging:paging-runtime-ktx:$paging_version"
    fullImplementation 'androidx.fragment:fragment-ktx:1.8.9'
    implementation 'com.google.android.material:material:1.12.0'
    fullImplementation 'androidx.viewpager2:viewpager2:1.1.0'

    fullImplementation 'com.squareup.okhttp3:okhttp:5.1.0'
    fullImplementation 'com.squareup.okhttp3:okhttp-dnsoverhttps:5.1.0'

    fullImplementation 'com.squareup.retrofit2:retrofit:3.0.0'
    fullImplementation 'com.squareup.retrofit2:converter-gson:3.0.0'

    implementation 'com.squareup.okio:okio-jvm:3.16.0'

    fullImplementation('com.github.bumptech.glide:glide:4.16.0') {
        exclude group: 'glide-parent'
    }
    fullImplementation('com.github.bumptech.glide:okhttp3-integration:4.16.0') {
        exclude group: 'glide-parent'
    }
    kspFull 'com.github.bumptech.glide:compiler:4.16.0'

    fullImplementation 'com.facebook.shimmer:shimmer:0.5.0'

    download 'io.insert-koin:koin-core:4.1.1'
    implementation 'io.insert-koin:koin-core:4.1.1'
    download 'io.insert-koin:koin-android:4.1.1'
    implementation 'io.insert-koin:koin-android:4.1.1'

    download 'hu.autsoft:krate:2.4.0'
    implementation 'hu.autsoft:krate:2.4.0'

    fullImplementation 'com.github.kirich1409:viewbindingpropertydelegate:1.5.9'
    fullImplementation 'com.github.kirich1409:viewbindingpropertydelegate-noreflection:1.5.9'

    download firestackDependency()
    websiteImplementation firestackDependency()

    implementation('androidx.work:work-runtime-ktx:2.10.3') {
        modules {
            module("com.google.guava:listenablefuture") {
                replacedBy("com.google.guava:guava", "listenablefuture is part of guava")
            }
        }
    }

    download 'com.github.seancfoley:ipaddress:5.5.1'
    implementation 'com.github.seancfoley:ipaddress:5.5.1'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'
    androidTestImplementation 'androidx.test:rules:1.7.0'

    fullImplementation 'androidx.navigation:navigation-fragment-ktx:2.9.3'
    fullImplementation 'androidx.navigation:navigation-ui-ktx:2.9.3'

    fullImplementation 'androidx.biometric:biometric:1.1.0'

    implementation("androidx.security:security-crypto:1.1.0")
    implementation("androidx.security:security-app-authenticator:1.0.0")
    androidTestImplementation("androidx.security:security-app-authenticator:1.0.0")

    fullImplementation 'com.journeyapps:zxing-android-embedded:4.3.0'
    fullImplementation 'com.simplecityapps:recyclerview-fastscroll:2.0.1'

    fullImplementation 'nl.dionsegijn:konfetti-xml:2.0.5'

    lintChecks 'com.android.security.lint:lint:1.0.3'
}

repositories {
    mavenCentral()
    google()
    maven { url 'https://jitpack.io' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    // Укажи кастомный репозиторий для версий 2.2.20 и 8.13.0
    // maven { url 'https://your-custom-repo' }
}
